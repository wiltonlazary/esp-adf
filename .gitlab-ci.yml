stages:
  - build
  - build_ut
  - assign_test
  - target_test
#  - example_test
  - deploy

variables:
  # System environment
  # Common parameters for the 'make' during CI tests
  MAKEFLAGS: "-j5 --no-keep-going"
  # more attempts for more robust
  GET_SOURCES_ATTEMPTS: "10"
  ARTIFACT_DOWNLOAD_ATTEMPTS: "10"
  # We use get_sources.sh script to fetch the submodules and/or re-fetch the repo
  # if it was corrupted (if submodule update fails this can happen)
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: none
  ADF_PATH: "$CI_PROJECT_DIR"
  IDF_PATH: "$CI_PROJECT_DIR/esp-idf"

.setup_tools_unless_target_test: &setup_tools_unless_target_test |
  if [[ "$SETUP_TOOLS" == "1" || "$CI_JOB_STAGE" != "target_test" ]]; then
  $IDF_PATH/tools/idf_tools.py --non-interactive install && eval "$($IDF_PATH/tools/idf_tools.py --non-interactive export)" || exit 1
  fi

.set_idf_version_and_update: &set_idf_version_and_update
  $ADF_PATH/tools/ci/set_idf.sh ${IDF_VERSION}

before_script:
  # add gitlab ssh key
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64
  - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

  # replace submodule esp-idf to internal repository to speedup cloning
  - sed -i "s%https://github.com/espressif/esp-idf%${GITLAB_SSH_SERVER}/idf/esp-idf.git%" .gitmodules
  # replace submodule esp-adf-libs to internal repository to speedup cloning
  - sed -i "s%https://github.com/espressif/esp-adf-libs%${GITLAB_SSH_SERVER}/adf/esp-adf-libs.git%" .gitmodules
  # - sed -i "s%https://github.com/espressif/esp-sr.git%${GITLAB_SSH_SERVER}/speech-recognition-internal/esp_sr_public.git%" .gitmodules
  - git config --global http.postBuffer 524288000
  - git submodule update --init
  - echo "current path:"$(pwd)
  - cd $ADF_PATH/..
  - if [[ ! -d "$ADF_PATH/../adf-libs-ut/" ]]; then git clone ssh://git@gitlab.espressif.cn:27227/adf/adf-libs-ut.git;else echo "adf-libs-ut folder already exists";fi
  - cd -
  - source $ADF_PATH/tools/ut/switch_branch.sh
  - source $IDF_PATH/tools/ci/setup_python.sh

  # (the same regular expressions are used to set these are used in 'only:' sections below
  - source esp-idf/tools/ci/configure_ci_environment.sh
  # fetch the submodules (& if necessary re-fetch repo) from gitlab

.add_gitlab_key_before:
  before_script: &add_gitlab_key_before
    - echo "Not fetching submodules"
    - source $IDF_PATH/tools/ci/configure_ci_environment.sh
    # add gitlab ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $AUTO_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

.add_gitlab_key_before_ut:
  before_script: &add_gitlab_key_before_ut
    - echo "Not fetching submodules"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - source $IDF_PATH/tools/ci/setup_python.sh
    - source $IDF_PATH/tools/ci/configure_ci_environment.sh

.build_template: &build_template
  stage: build
  image: $CI_DOCKER_REGISTRY/esp32-ci-env$BOT_DOCKER_IMAGE_TAG
  tags:
    - build
  variables:
    BATCH_BUILD: "1"
    V: "0"

.build_template_v44: &build_template_v44
  stage: build
  image: $CI_DOCKER_REGISTRY/esp-env:v4.4-1
  tags:
    - build
  variables:
    BATCH_BUILD: "1"
    V: "0"

.build_examples_make: &build_examples_make
  <<: *build_template
  parallel: 8
  # This is a workaround for a rarely encountered issue with building examples in CI.
  # Probably related to building of Kconfig in 'make clean' stage
  retry: 1
  artifacts:
    when: always
    paths:
      - build_examples/*/*/*/build/*.bin
      - build_examples/*/*/*/sdkconfig
      - build_examples/*/*/*/build/*.elf
      - build_examples/*/*/*/build/*.map
      - build_examples/*/*/*/build/download.config
      - build_examples/*/*/*/build/bootloader/*.bin
      - build_examples/*/*/*/*/build/partition_table/*.bin
      - $LOG_PATH
    expire_in: 4 days
  variables:
    IDF_CI_BUILD: "1"
    LOG_PATH: "$CI_PROJECT_DIR/log_examples_make"
  script:
    # it's not possible to build 100% out-of-tree and have the "artifacts"
    # mechanism work, but this is the next best thing
    - cd ${IDF_PATH}
    - git submodule update --init --recursive
    - cd ${ADF_PATH}
    - rm -rf build_examples
    - mkdir build_examples
    - cd build_examples
    # build some of examples
    - mkdir -p ${LOG_PATH}
    # enable pedantic flags for compilation
    - export PEDANTIC_CFLAGS="-Werror -Werror=deprecated-declarations -Werror=unused-variable -Werror=unused-but-set-variable -Werror=unused-function"
    - export EXTRA_CFLAGS=${PEDANTIC_CFLAGS} && export EXTRA_CXXFLAGS=${EXTRA_CFLAGS}
    - ${ADF_PATH}/tools/ci/build_examples.sh
    # Check if the tests demand Make built binaries. If not, delete them
    - if [ "$EXAMPLE_TEST_BUILD_SYSTEM" == "make" ]; then exit 0; fi
    - cd ..
    - rm -rf build_examples

# same as above, but for CMake
.build_examples_cmake: &build_examples_cmake
  extends: .build_template
  parallel: 8
  artifacts:
    when: always
    paths:
      - build_examples/list.json
      - build_examples/list_job_*.json
      - build_examples/*/*/*/sdkconfig
      - build_examples/*/*/*/build/*.bin
      - build_examples/*/*/*/build/*.elf
      - build_examples/*/*/*/build/*.map
      - build_examples/*/*/*/build/flasher_args.json
      - build_examples/*/*/*/build/bootloader/*.bin
      - build_examples/*/*/*/build/partition_table/*.bin
      - $LOG_PATH
    expire_in: 4 days
  variables:
    LOG_PATH: "$CI_PROJECT_DIR/log_examples"
    BUILD_PATH: "$CI_PROJECT_DIR/build_examples"
  only:
    variables:
      - $BOT_TRIGGER_WITH_LABEL == null
      - $BOT_LABEL_BUILD
      - $BOT_LABEL_EXAMPLE_TEST
      - $BOT_LABEL_REGULAR_TEST
      - $BOT_LABEL_WEEKEND_TEST
  script:
    # it's not possible to build 100% out-of-tree and have the "artifacts"
    # mechanism work, but this is the next best thing
    - mkdir -p ${BUILD_PATH}
    - mkdir -p ${LOG_PATH}
    - echo "The IDF branch is "${IDF_VERSION}
    - $ADF_PATH/tools/ci/set_idf.sh ${IDF_VERSION}
    - *setup_tools_unless_target_test
    - export PEDANTIC_CFLAGS="-Werror -Wno-implicit-fallthrough"
    - export EXTRA_CFLAGS=${PEDANTIC_CFLAGS} && export EXTRA_CXXFLAGS=${EXTRA_CFLAGS}
    - ${ADF_PATH}/tools/ci/build_examples_cmake.sh
    # Check if the tests demand CMake built binaries. If not, delete them
    - if [ "$EXAMPLE_TEST_BUILD_SYSTEM" == "cmake" ]; then exit 0; fi
    - cd ..
    - rm -rf build_examples

# same as above, but for v4.4
.build_examples_cmake_v44: &build_examples_cmake_v44
  <<: *build_template_v44
  parallel: 8
  artifacts:
    when: always
    paths:
      - build_examples/list.json
      - build_examples/list_job_*.json
      - build_examples/*/*/*/sdkconfig
      - build_examples/*/*/*/build/*.bin
      - build_examples/*/*/*/build/*.elf
      - build_examples/*/*/*/build/*.map
      - build_examples/*/*/*/build/flasher_args.json
      - build_examples/*/*/*/build/bootloader/*.bin
      - build_examples/*/*/*/build/partition_table/*.bin
      - $LOG_PATH
      - $EXAMPLE_TEST_OUTPUT_DIR
    expire_in: 4 days
  before_script:
    # - source $IDF_PATH/tools/ci/configure_ci_environment.sh
  variables:
    SIZE_INFO_LOCATION: "$CI_PROJECT_DIR/size_info.txt"
    LOG_PATH: "$CI_PROJECT_DIR/log_examples"
    BUILD_PATH: "$CI_PROJECT_DIR/build_examples"
    EXAMPLE_TEST_OUTPUT_DIR: ${CI_PROJECT_DIR}/examples/test_configs
    CI_SCAN_TESTS_PY: ${CI_PROJECT_DIR}/esp-idf/tools/ci/python_packages/ttfw_idf/CIScanTests.py
    EXAMPLE_TEST_DIR: ${CI_PROJECT_DIR}/examples
    TEST_PREFIX: examples
    TEST_RELATIVE_DIR: examples
    TEST_TYPE: example_test
    SCAN_TEST_JSON: ${CI_PROJECT_DIR}/${TEST_RELATIVE_DIR}/test_configs/scan_${IDF_TARGET}_${BUILD_SYSTEM}.json
    PYTHON_VER: 3
    # TEST_CONFIG_FILE: ${CI_PROJECT_DIR}/esp-idf/tools/ci/config/target-test.yml
    # TEST_CONFIG_FILE: "$CI_PROJECT_DIR/esp-idf/.gitlab/ci/target-test.yml"

  only:
    variables:
      - $BOT_TRIGGER_WITH_LABEL == null
      - $BOT_LABEL_BUILD
      - $BOT_LABEL_EXAMPLE_TEST
      - $BOT_LABEL_REGULAR_TEST
      - $BOT_LABEL_WEEKEND_TEST
  script:
    # it's not possible to build 100% out-of-tree and have the "artifacts"
    # mechanism work, but this is the next best thing
    - mkdir -p ${BUILD_PATH}
    - mkdir -p ${LOG_PATH}
    - echo "The IDF branch is "${IDF_VERSION}

    - $ADF_PATH/tools/ci/set_idf.sh ${IDF_VERSION}
    - source $IDF_PATH/tools/ci/configure_ci_environment.sh
    - *setup_tools_unless_target_test

    - pip3 install junit_xml
    - pip3 install netifaces
    - export PYTHONPATH=$IDF_PATH/tools/ci/python_packages:$IDF_PATH/tools
    - echo "Ready to scan the examples"
    - python $CI_SCAN_TESTS_PY example_test $EXAMPLE_TEST_DIR -b cmake --exclude $ADF_PATH/examples/korvo_du1906 -c $TEST_CONFIG_FILE -o $EXAMPLE_TEST_OUTPUT_DIR

    - export PEDANTIC_CFLAGS="-Werror -Wno-implicit-fallthrough"
    - export EXTRA_CFLAGS=${PEDANTIC_CFLAGS} && export EXTRA_CXXFLAGS=${EXTRA_CFLAGS}
    # - ${ADF_PATH}/tools/ci/build_examples_cmake.sh
    - ${IDF_PATH}/tools/ci/find_apps_build_apps.sh
    # Check if the tests demand CMake built binaries. If not, delete them
    - if [ "$EXAMPLE_TEST_BUILD_SYSTEM" == "cmake" ]; then exit 0; fi
    - cd ..
    - rm -rf build_examples

.build_ut_template: &build_ut_template
  stage: build_ut
  image: $CI_DOCKER_REGISTRY/esp32-ci-env$BOT_DOCKER_IMAGE_TAG
  tags:
    - adf_build
  variables:
    BATCH_BUILD: "1"
    V: "0"

.build_esp_adf_unit_test_template: &build_esp_adf_unit_test_template
  <<: *build_ut_template
  only:
    variables:
      - $BOT_TRIGGER_WITH_LABEL == null
      - $BOT_LABEL_BUILD
      - $BOT_LABEL_UNIT_TEST
      - $BOT_LABEL_REGULAR_TEST

.add_adf_components_to_ut_make_build: &add_adf_components_to_ut_make_build
  - cd $ADF_PATH
  - git apply idf_patches/adf_http_stream.patch
  - cd ../adf-libs-ut
  - export ADF_UT=$(pwd)
  - cd $ADF_PATH
  - sed -i '/EXTRA_COMPONENT_DIRS += \$(ADF_PATH)\/components\//a\EXTRA_COMPONENT_DIRS += $(ADF_UT)/esp_audio' project.mk
  - git log -2
  - cd $IDF_PATH
  - $ADF_PATH/tools/ci/set_idf.sh ${IDF_VERSION}
  # - if [[ "$SETUP_TOOLS" == "1" || "$CI_JOB_STAGE" != "target_test" ]]; then
  # $IDF_PATH/tools/idf_tools.py --non-interactive install && eval "$($IDF_PATH/tools/idf_tools.py --non-interactive export)" || exit 1
  # fi
  - source $IDF_PATH/tools/ci/configure_ci_environment.sh
  - git apply $ADF_PATH/idf_patches/idf_v3.3_freertos.patch
  - git apply $ADF_PATH/idf_patches/idf_v3.3_esp_http_client.patch
  - cd -
  - cd $IDF_PATH/tools/unit-test-app
  - cp $ADF_UT/sdkconfig.defaults ./
  - rm -rf $IDF_PATH/tools/ci
  - cp -rf $ADF_UT/ci $IDF_PATH/tools
  - sed -i "s%CRITICAL_LEAK_THRESHOLD = 4096%CRITICAL_LEAK_THRESHOLD = 26240%" $IDF_PATH/tools/unit-test-app/components/test_utils/test_runner.c
  - sed -i "s%include \$(IDF_PATH)\/make\/project.mk%include \$(ADF_PATH)\/project.mk%g" Makefile

.build_esp_adf_tests_make:
  <<: *build_esp_adf_unit_test_template
  artifacts:
    paths:
      - $IDF_PATH/components/idf_test/unit_test/TestCaseAll.yml
      - $IDF_PATH/tools/unit-test-app/
      - $IDF_PATH/tools/unit-test-app/output
      - $IDF_PATH/tools/unit-test-app/build/*.elf
      - $IDF_PATH/tools/unit-test-app/build/*.map
      - $IDF_PATH/tools/unit-test-app/build/*.bin
      - $IDF_PATH/tools/unit-test-app/build/download.config
      - $IDF_PATH/tools/unit-test-app/build/bootloader/*
      - $IDF_PATH/tools/tiny-test-fw/
      - $IDF_PATH/tools/ci
      - $IDF_PATH/components/esptool_py/esptool/
      - $IDF_PATH/components/partition_table/
    # when: always
    expire_in: 4 days
  dependencies: []
  variables:
    LOG_PATH: "$CI_PROJECT_DIR/log_ut_make"
    OUTPUT_PATH: ${IDF_PATH}/tools/unit-test-app/output
  script:
    - echo $PATH
    - xtensa-esp32-elf-gcc -v
    # - *set_idf_version_and_update
    - *add_adf_components_to_ut_make_build
    - MAKEFLAGS= make help # make sure kconfig tools are built in single process
    - make clean
    - make -j8 TEST_COMPONENTS="$ADF_UT/esp_audio"
    - make print_flash_cmd > build/download.config
    - mkdir adf_configs
    - mkdir output
    - mkdir output/default
    - mkdir $IDF_PATH/components/idf_test/unit_test
    - cp configs/default adf_configs/
    - cp sdkconfig output/default/
    - cp -ar build/*.bin output/default
    - cp -ar build/*.elf output/default
    - cp -ar build/*.map output/default
    - cp -ar build/bootloader output/default
    - cd $ADF_UT
    - python tools/UnitTestParser.py

adf_ut_make_v33:
  extends: .build_esp_adf_tests_make
  variables:
    IDF_VERSION: 722043f73
    IDF_TARGET: esp32

build_examples_v40_cmake:
  extends: .build_examples_cmake
  variables:
    IDF_TARGET: esp32
    IDF_VERSION: release/v4.0
    IDF_FIND_APP_PATH_ARG: ""

build_examples_v41_cmake:
  extends: .build_examples_cmake
  variables:
    IDF_TARGET: esp32
    IDF_VERSION: release/v4.1
    IDF_FIND_APP_PATH_ARG: ""

build_examples_v42_cmake:
  extends: .build_examples_cmake
  variables:
    IDF_TARGET: esp32
    IDF_VERSION: release/v4.2
    IDF_FIND_APP_PATH_ARG: ""

build_examples_v43_cmake:
  extends: .build_examples_cmake_v44
  variables:
    IDF_TARGET: esp32
    IDF_VERSION: release/v4.3
    BUILD_SYSTEM: cmake
    IDF_FIND_APP_PATH_ARG: "-p"
    TEST_CONFIG_FILE: ${CI_PROJECT_DIR}/esp-idf/tools/ci/config/target-test.yml

build_examples_v44_cmake:
  extends: .build_examples_cmake_v44
  variables:
    IDF_TARGET: esp32
    IDF_VERSION: release/v4.4
    BUILD_SYSTEM: cmake
    IDF_FIND_APP_PATH_ARG: "-p"
    TEST_CONFIG_FILE: "$CI_PROJECT_DIR/esp-idf/.gitlab/ci/target-test.yml"

.build_examples_cmake_s2:
  extends: .build_examples_cmake
  variables:
    IDF_TARGET: esp32s2beta
    IDF_VERSION: release/v4.1
    IDF_FIND_APP_PATH_ARG: "-p"

build_examples_v33_make:
  <<: *build_examples_make

build_adf_test:
  <<: *build_template
  artifacts:
    when: always
    paths:
      - adf-cli/build/*.bin
      - adf-cli/build/*.elf
      - adf-cli/build/*.map
      - adf-cli/build/download.config
      - adf-cli/build/bootloader/*.bin
      - $IDF_PATH/tools/ci
      - $IDF_PATH/components/esptool_py
      - $IDF_PATH/components/partition_table
    expire_in: 1 month
  script:
    - cd ${IDF_PATH}
    - git submodule update --init --recursive
    - cd ${ADF_PATH}/components/esp-adf-libs
    - git log -2
    - cd ${ADF_PATH}
    - git clone ${ADF_TEST_CLI_REPO}
    - cd adf-cli
    - git checkout ${CI_COMMIT_REF_NAME} || echo "Using adf-cli default branch..."
    - make defconfig
    - make
    - make print_flash_cmd > build/download.config

build_docs:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp-idf-doc-env:v7
  tags:
    - build_docs
  artifacts:
    when: always
    paths:
      # English version of documentation
      - docs/en/doxygen-warning-log.txt
      - docs/en/sphinx-warning-log.txt
      - docs/en/sphinx-warning-log-sanitized.txt
      - docs/en/_build/html
      # Chinese version of documentation
      - docs/zh_CN/doxygen-warning-log.txt
      - docs/zh_CN/sphinx-warning-log.txt
      - docs/zh_CN/sphinx-warning-log-sanitized.txt
      - docs/zh_CN/_build/html
    expire_in: 1 mos
  script:
    - source /opt/pyenv/activate && pyenv global 3.6.10
    - /opt/pyenv/pyenv-1.2.16/versions/3.6.10/bin/python -m pip install --user -r docs/requirements.txt
    - cd docs
    - ./check_lang_folder_sync.sh
    - cd en
    - make gh-linkcheck
    - make html
    - ../check_doc_warnings.sh
    - cd ../zh_CN
    - make gh-linkcheck
    - make html
    - ../check_doc_warnings.sh

.assign_test_template: &assign_test_template
  tags:
    - adf_assign_test
  # image: $CI_DOCKER_REGISTRY/ubuntu-test-env$BOT_DOCKER_IMAGE_TAG
  image: $CI_DOCKER_REGISTRY/ubuntu-test-env:old1     # just a temporary solution
  stage: assign_test
  artifacts:
    paths:
      - $IDF_PATH/components/idf_test/*/CIConfigs
      - $IDF_PATH/components/idf_test/*/TC.sqlite
    when: always
    expire_in: 1 week
  only:
    variables:
      - $BOT_TRIGGER_WITH_LABEL == null
      - $BOT_LABEL_UNIT_TEST
      - $BOT_LABEL_INTEGRATION_TEST
      - $BOT_LABEL_EXAMPLE_TEST
  before_script: *add_gitlab_key_before_ut
  script:
    - ls
    - pwd
    - python $UNIT_ASSIGN_SCRIPT $IDF_PATH/components/idf_test/unit_test/TestCaseAll.yml $CI_PROJECT_DIR/.gitlab-ci.yml $IDF_PATH/components/idf_test/unit_test/CIConfigs

assign_test_v33:
  <<: *assign_test_template
  dependencies:
    - adf_ut_make_v33
  variables:
    # UNIT_ASSIGN_SCRIPT: "esp-adf-internal/esp-idf/tools/tiny-test-fw/CIAssignUnitTest.py"
    UNIT_ASSIGN_SCRIPT: "esp-idf/tools/tiny-test-fw/CIAssignUnitTest.py"
    PYTHON_VER: 3.7.7

assign_test:
  tags:
    - assign_test
  image: $CI_DOCKER_REGISTRY/audio_test_env$BOT_DOCKER_IMAGE_TAG
  stage: assign_test
  # gitlab ci do not support match job with RegEx or wildcard now in dependencies.
  # we have a lot build example jobs. now we don't use dependencies, just download all artificats of build stage.
  dependencies:
    - build_adf_test
    - build_examples_v33_make
    - build_examples_v40_cmake
  variables:
    TEST_FW_PATH: "$CI_PROJECT_DIR/general_test_framework"
    EXAMPLE_CONFIG_OUTPUT_PATH: "$CI_PROJECT_DIR/examples/test_configs"
    AUTO_TEST_PATH: "$CI_PROJECT_DIR/audio_auto_test"
  artifacts:
    paths:
      - $TEST_FW_PATH
      - $EXAMPLE_CONFIG_OUTPUT_PATH
      - $AUTO_TEST_PATH
    expire_in: 1 mos
  before_script: *add_gitlab_key_before
  script:
    - source /opt/pyenv/activate
    - pyenv global 3.5.5
    - git clone ${AUDIO_AUTO_REPO}
    - git clone ${TEST_FW_REPO}
    # assign example tests
    - python $TEST_FW_PATH/CIAssignExampleTest.py $CI_PROJECT_DIR/examples $CI_PROJECT_DIR/.gitlab-ci.yml $EXAMPLE_CONFIG_OUTPUT_PATH

.example_test_template: &example_test_template
  stage: example_test
  when: on_success
  dependencies:
    - assign_test
    - build_examples_v33_make
    - build_examples_v40_cmake
    - build_adf_test
  artifacts:
    when: always
    paths:
      - $LOG_PATH
    expire_in: 1 mos
  variables:
    TEST_FW_PATH: "$CI_PROJECT_DIR/general_test_framework"
    TEST_CASE_PATH: "$CI_PROJECT_DIR/examples"
    CONFIG_FILE: "$CI_PROJECT_DIR/examples/test_configs/$CI_JOB_NAME.yml"
    LOG_PATH: "$CI_PROJECT_DIR/log_examples"
    ENV_FILE: "$IDF_PATH/ci-test-runner-configs/$CI_RUNNER_DESCRIPTION/EnvConfig.yml"
    AUTO_TEST_PATH: "$CI_PROJECT_DIR/audio_auto_test"
  before_script: *add_gitlab_key_before
  script:
    # first test if config file exists, if not exist, exit 0
    - test -e $CONFIG_FILE || exit 0
    # run test
    - python $TEST_FW_PATH/Runner.py $TEST_CASE_PATH -c $CONFIG_FILE -e $ENV_FILE

.example_test_play_mp3: &example_test_play_mp3
  <<: *example_test_template
  tags:
    - ESP32
    - Example_AUDIO_PLAY

push_to_github:
  stage: deploy
  only:
    - master
    - /^release\/v/
#  when: on_success
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  variables:
    GIT_STRATEGY: clone
  before_script:
    - echo "skip default before_script"
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote remove github &>/dev/null || true
    - git remote add github git@github.com:espressif/esp-adf.git
    - tools/ci/push_to_github.sh

.define_config_file_name: &define_config_file_name |
  JOB_NAME_PREFIX=$(echo ${CI_JOB_NAME} | awk '{print $1}')
  JOG_FULL_NAME="${JOB_NAME_PREFIX}_${CI_NODE_INDEX}"
  CONFIG_FILE="${CONFIG_FILE_PATH}/${JOG_FULL_NAME}.yml"

.unit_test_template: &unit_test_template
  stage: target_test
  when: on_success
  only:
    refs:
      - master
      - /^release\/v/
      - /^v\d+\.\d+(\.\d+)?($|-)/
      - triggers
      - schedules
    variables:
      - $BOT_TRIGGER_WITH_LABEL == null
      - $BOT_LABEL_UNIT_TEST
  artifacts:
    when: always
    paths:
      - $LOG_PATH
    expire_in: 1 week
    reports:
        junit: $LOG_PATH/*/XUNIT_RESULT.xml
  before_script: *add_gitlab_key_before_ut
  script:
    - *define_config_file_name
    - find / -name UT_001_.yml
    - find / -name UT_002_.yml
    - pwd
    - ls
    - test -e $CONFIG_FILE || exit 0
    - echo $JOG_FULL_NAME
    - echo $CONFIG_FILE
    - ls -al $CONFIG_FILE
    - ls -al $TEST_SCRIPT
    - ls -al $TEST_CASE_PATH
    - ls -al $IDF_PATH
    # clone test env configs
    - ./esp-idf/tools/ci/retry_failed.sh git clone $TEST_ENV_CONFIG_REPOSITORY
    - python $CHECKOUT_REF_SCRIPT ci-test-runner-configs ci-test-runner-configs
    # run test
    - echo $TEST_SCRIPT
    - echo $TEST_CASE_PATH
    - echo $CONFIG_FILE
    - echo $ENV_FILE
    - pwd
    - python $TEST_SCRIPT $TEST_CASE_PATH -c $CONFIG_FILE -e $ENV_FILE

.job_template: &job_template
  <<: *unit_test_template
  dependencies:
    - adf_ut_make_v33
    - assign_test_v33
  variables:
    TEST_SCRIPT: "esp-idf/tools/tiny-test-fw/Runner.py"
    TEST_CASE_PATH: "esp-idf/tools/unit-test-app"
    CONFIG_FILE_PATH: "esp-idf/components/idf_test/unit_test/CIConfigs"
    LOG_PATH: "esp-idf/TEST_LOGS"
    ENV_FILE: "ci-test-runner-configs/$CI_RUNNER_DESCRIPTION/EnvConfig.yml"
    CHECKOUT_REF_SCRIPT: "esp-idf/tools/ci/checkout_project_ref.py"
    PYTHON_VER: 3.7.7

UT_001:
  <<: *job_template
  tags:
    - UT_T1_AUDIO
    - ESP32_IDF
    - 8Mpsram
  retry: 2

UT_002:
  <<: *job_template
  tags:
    - UT_T1_AUDIO
    - ESP32_IDF
    - 8Mpsram
  retry: 2

UT_003:
  <<: *job_template
  tags:
    - UT_T1_AUDIO_L1
    - ESP32_IDF
    - 8Mpsram
  retry: 2

UT_004:
  <<: *job_template
  tags:
    - UT_T1_AUDIO_L2
    - ESP32_IDF
    - 8Mpsram
  retry: 2

UT_005:
  <<: *job_template
  tags:
    - UT_T1_AUDIO_L3
    - ESP32_IDF
    - 8Mpsram
  retry: 2

UT_006:
  <<: *job_template
  tags:
    - UT_T1_AUDIO_L4
    - ESP32_IDF
    - 8Mpsram
  retry: 2

UT_007:
  <<: *job_template
  tags:
    - UT_T1_AUDIO_L5
    - ESP32_IDF
    - 8Mpsram
  retry: 2

UT_008:
  <<: *job_template
  tags:
    - UT_T1_1
    - ESP32_IDF
    - 8Mpsram
  retry: 2

UT_009:
  <<: *job_template
  tags:
    - UT_T1_AUDIO_E6
    - ESP32_IDF
    - 8Mpsram
  retry: 2
